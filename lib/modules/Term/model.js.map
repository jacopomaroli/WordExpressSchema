{"version":3,"sources":["../../../src/modules/Term/model.js"],"names":["TermModel","Conn","prefix","define","term_id","type","Sequelize","INTEGER","primaryKey","name","STRING","slug","term_group","TermRelationshipModel","object_id","term_taxonomy_id","term_order","TermTaxonomyModel","taxonomy","parent","count"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAOC,MAAP,EAAkB;AAClC,SAAOD,KAAKE,MAAL,CAAYD,SAAS,OAArB,EAA8B;AACnCE,aAAS,EAAEC,MAAMC,oBAAUC,OAAlB,EAA2BC,YAAY,IAAvC,EAD0B;AAEnCC,UAAM,EAAEJ,MAAMC,oBAAUI,MAAlB,EAF6B;AAGnCC,UAAM,EAAEN,MAAMC,oBAAUI,MAAlB,EAH6B;AAInCE,gBAAY,EAAEP,MAAMC,oBAAUC,OAAlB;AAJuB,GAA9B,CAAP;AAMD,CAPD;;AASA,IAAMM,wBAAwB,SAAxBA,qBAAwB,CAACZ,IAAD,EAAOC,MAAP,EAAkB;AAC9C,SAAOD,KAAKE,MAAL,CAAYD,SAAS,oBAArB,EAA2C;AAChDY,eAAW,EAAET,MAAMC,oBAAUC,OAAlB,EAA2BC,YAAY,IAAvC,EADqC;AAEhDO,sBAAkB,EAAEV,MAAMC,oBAAUC,OAAlB,EAF8B;AAGhDS,gBAAY,EAAEX,MAAMC,oBAAUC,OAAlB;AAHoC,GAA3C,CAAP;AAKD,CAND;;AAQA,IAAMU,oBAAoB,SAApBA,iBAAoB,CAAChB,IAAD,EAAOC,MAAP,EAAkB;AAC1C,SAAOD,KAAKE,MAAL,CAAYD,SAAS,eAArB,EAAsC;AAC3Ca,sBAAkB,EAAEV,MAAMC,oBAAUC,OAAlB,EAA2BC,YAAY,IAAvC,EADyB;AAE3CJ,aAAS,EAAEC,MAAMC,oBAAUC,OAAlB,EAFkC;AAG3CW,cAAU,EAAEb,MAAMC,oBAAUI,MAAlB,EAHiC;AAI3CS,YAAQ,EAAEd,MAAMC,oBAAUC,OAAlB,EAJmC;AAK3Ca,WAAO,EAAEf,MAAMC,oBAAUC,OAAlB;AALoC,GAAtC,CAAP;AAOD,CARD;;QAUQP,S,GAAAA,S;QAAWa,qB,GAAAA,qB;QAAuBI,iB,GAAAA,iB","file":"model.js","sourcesContent":["import Sequelize from 'sequelize'\r\n\r\nconst TermModel = (Conn, prefix) => {\r\n  return Conn.define(prefix + 'terms', {\r\n    term_id: { type: Sequelize.INTEGER, primaryKey: true },\r\n    name: { type: Sequelize.STRING },\r\n    slug: { type: Sequelize.STRING },\r\n    term_group: { type: Sequelize.INTEGER },\r\n  })\r\n}\r\n\r\nconst TermRelationshipModel = (Conn, prefix) => {\r\n  return Conn.define(prefix + 'term_relationships', {\r\n    object_id: { type: Sequelize.INTEGER, primaryKey: true },\r\n    term_taxonomy_id: { type: Sequelize.INTEGER },\r\n    term_order: { type: Sequelize.INTEGER },\r\n  })\r\n}\r\n\r\nconst TermTaxonomyModel = (Conn, prefix) => {\r\n  return Conn.define(prefix + 'term_taxonomy', {\r\n    term_taxonomy_id: { type: Sequelize.INTEGER, primaryKey: true },\r\n    term_id: { type: Sequelize.INTEGER },\r\n    taxonomy: { type: Sequelize.STRING },\r\n    parent: { type: Sequelize.INTEGER },\r\n    count: { type: Sequelize.INTEGER },\r\n  })\r\n}\r\n\r\nexport {TermModel, TermRelationshipModel, TermTaxonomyModel}"]}