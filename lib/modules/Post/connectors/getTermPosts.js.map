{"version":3,"sources":["../../../../src/modules/Post/connectors/getTermPosts.js"],"names":["TermRelationships","Post","TermTaxonomy","settings","wp_prefix","privateSettings","termId","post_type","order","limit","skip","from_date","to_date","orderBy","direction","termIds","getTermIds","parentTermIds","length","findAll","attributes","include","where","parent","then","posts","p","map","post","term_taxonomy_id","push","PostWhere","post_status","post_date","Op","gte","Date","lte","model","taxonomy","offset","Sequelize"],"mappings":";;;;;;kBAGe,UAAUA,iBAAV,EAA6BC,IAA7B,EAAmCC,YAAnC,EAAiDC,QAAjD,EAA0D;AAAA,MAChEC,SADgE,GACnDD,SAASE,eAD0C,CAChED,SADgE;;;AAGvE,SAAO,UAASE,MAAT,QAAiF;AAAA,QAA9DC,SAA8D,QAA9DA,SAA8D;AAAA,QAAnDC,KAAmD,QAAnDA,KAAmD;AAAA,0BAA5CC,KAA4C;AAAA,QAA5CA,KAA4C,8BAApC,EAAoC;AAAA,yBAAhCC,IAAgC;AAAA,QAAhCA,IAAgC,6BAAzB,CAAyB;AAAA,QAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,QAAXC,OAAW,QAAXA,OAAW;;AACtF,QAAMC,UAAUL,QAAQ,CAACP,IAAD,EAAOO,MAAMK,OAAb,EAAsBL,MAAMM,SAA5B,CAAR,GAAiD,CAACb,IAAD,EAAO,WAAP,EAAoB,MAApB,CAAjE;;AAEA,QAAIc,UAAU,CAACT,MAAD,CAAd;;AAEA,aAASU,UAAT,CAAoBC,aAApB,EAAmC;AACjC,UAAI,CAACA,cAAcC,MAAnB,EAA2B,OAAOH,OAAP;;AAE3B,aAAOb,aAAaiB,OAAb,CAAqB;AAC1BC,oBAAY,CAAC,kBAAD,CADc;AAE1BC,iBAAS,EAFiB;AAG1BC,eAAO;AACLC,kBAAQN;AADH;AAHmB,OAArB,EAONO,IAPM,CAOD,UAAUC,KAAV,EAAiB;AACrB,YAAMC,IAAID,MAAME,GAAN,CAAU;AAAA,iBAAQC,KAAKC,gBAAb;AAAA,SAAV,CAAV;AACAd,gBAAQe,IAAR,mCAAgBJ,CAAhB;AACA,eAAOA,CAAP;AACD,OAXM,EAYNF,IAZM,CAYDR,UAZC,CAAP;AAaD;;AAED,QAAIe,YAAY;AACdxB,iBAAWA,SADG;AAEdyB,mBAAa;AAFC,KAAhB;;AAKA,QAAIrB,SAAJ,EAAe;AACboB,gBAAUE,SAAV,GAAsBF,UAAUE,SAAV,IAAuB,EAA7C;AACAF,gBAAUE,SAAV,CAAoBC,GAAGC,GAAvB,IAA8B,IAAIC,IAAJ,CAASzB,SAAT,CAA9B;AACD;;AAED,QAAIC,OAAJ,EAAa;AACXmB,gBAAUE,SAAV,GAAsBF,UAAUE,SAAV,IAAuB,EAA7C;AACAF,gBAAUE,SAAV,CAAoBC,GAAGG,GAAvB,IAA8B,IAAID,IAAJ,CAASxB,OAAT,CAA9B;AACD;;AAED,WAAOI,WAAW,CAACV,MAAD,CAAX,EACJkB,IADI,CACC,UAACT,OAAD,EAAa;AACjB,aAAOf,kBAAkBmB,OAAlB,CAA0B;AAC/BC,oBAAY,EADmB;AAE/BC,iBAAS,CAAC;AACRiB,iBAAOrC,IADC;AAERqB,iBAAOS;AAFC,SAAD,EAGN;AACDO,iBAAOpC,YADN;AAEDoB,iBAAO;AACLiB,sBAAU;AADL;AAFN,SAHM,CAFsB;AAW/BjB,eAAO;AACLO,4BAAkBd;AADb,SAXwB;AAc/BP,eAAO,CAACK,OAAD,CAdwB;AAe/BJ,eAAOA,KAfwB;AAgB/B+B,gBAAQ9B;AAhBuB,OAA1B,CAAP;AAkBD,KApBI,EAqBJc,IArBI,CAqBC,iBAAS;AACb,UAAME,IAAID,MAAME,GAAN,CAAU;AAAA,eAAQC,KAAQxB,SAAR,UAAR;AAAA,OAAV,CAAV;AACA,aAAOsB,CAAP;AACD,KAxBI,CAAP;AAyBD,GA/DD;AAgED,C;;AAtED;;;;;;;;AACA,IAAMQ,KAAKO,oBAAUP,EAArB","file":"getTermPosts.js","sourcesContent":["import Sequelize from 'sequelize'\r\nconst Op = Sequelize.Op\r\n\r\nexport default function (TermRelationships, Post, TermTaxonomy, settings){\r\n  const {wp_prefix} = settings.privateSettings\r\n\r\n  return function(termId, { post_type, order, limit = 10, skip = 0, from_date, to_date }) {\r\n    const orderBy = order ? [Post, order.orderBy, order.direction] : [Post, 'post_date', 'DESC']\r\n\r\n    let termIds = [termId]\r\n\r\n    function getTermIds(parentTermIds) {\r\n      if (!parentTermIds.length) return termIds\r\n\r\n      return TermTaxonomy.findAll({\r\n        attributes: ['term_taxonomy_id'],\r\n        include: [],\r\n        where: {\r\n          parent: parentTermIds\r\n        }\r\n      })\r\n      .then(function (posts) {\r\n        const p = posts.map(post => post.term_taxonomy_id)\r\n        termIds.push(...p)\r\n        return p\r\n      })\r\n      .then(getTermIds)\r\n    }\r\n\r\n    let PostWhere = {\r\n      post_type: post_type,\r\n      post_status: 'publish'\r\n    }\r\n\r\n    if (from_date) {\r\n      PostWhere.post_date = PostWhere.post_date || {}\r\n      PostWhere.post_date[Op.gte] = new Date(from_date)\r\n    }\r\n\r\n    if (to_date) {\r\n      PostWhere.post_date = PostWhere.post_date || {}\r\n      PostWhere.post_date[Op.lte] = new Date(to_date)\r\n    }\r\n\r\n    return getTermIds([termId])\r\n      .then((termIds) => {\r\n        return TermRelationships.findAll({\r\n          attributes: [],\r\n          include: [{\r\n            model: Post,\r\n            where: PostWhere\r\n          }, {\r\n            model: TermTaxonomy,\r\n            where: {\r\n              taxonomy: 'category'\r\n            }\r\n          }],\r\n          where: {\r\n            term_taxonomy_id: termIds\r\n          },\r\n          order: [orderBy],\r\n          limit: limit,\r\n          offset: skip\r\n        })\r\n      })\r\n      .then(posts => {\r\n        const p = posts.map(post => post[`${wp_prefix}post`])\r\n        return p\r\n      })\r\n  }\r\n}"]}